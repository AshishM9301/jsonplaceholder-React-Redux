{"version":3,"sources":["apis/jsonPlaceHolder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postReducer.js","reducers/usersReducer.js","index.js"],"names":["Axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceHolder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostAndUsers","posts","map","post","key","title","body","renderList","getState","_","uniq","forEach","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"8PAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yC,iBCMEC,EAAa,WACxB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACkBC,EAAgBC,IAAI,UADtC,OACCC,EADD,OAGLJ,EAAS,CACPK,KAAM,cACNC,QAASF,EAASG,OALf,2CAAP,uDA4BWC,EAAY,SAACC,GACxB,8CAAO,WAAOT,GAAP,eAAAC,EAAA,sEACkBC,EAAgBC,IAAhB,iBAA8BM,IADhD,OACCL,EADD,OAGLJ,EAAS,CACPK,KAAM,aACNC,QAASF,EAASG,OALf,2CAAP,uDCpCIG,E,uKACM,IACAC,EAASC,KAAKC,MAAdF,KAER,OAAKA,EAGE,yBAAKG,UAAU,UAAUH,EAAKI,MAF5B,S,GALYC,aAeVC,eAJS,SAACC,EAAOC,GAC9B,MAAO,CAAER,KAAMO,EAAME,MAAMC,MAAK,SAACV,GAAD,OAAUA,EAAKF,KAAOU,EAASG,aAGlDL,CAAyBP,GCblCa,E,kLAEFX,KAAKC,MAAMW,sB,mCAIX,OAAOZ,KAAKC,MAAMY,MAAMC,KAAI,SAACC,GAC3B,OACE,yBAAKb,UAAU,OAAOc,IAAKD,EAAKlB,IAC9B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKa,EAAKE,OACV,2BAAIF,EAAKG,OAEX,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQjC,OAAO,yBAAKR,UAAU,2BAA2BF,KAAKmB,kB,GAvBnCf,aAiCRC,eANS,SAACC,GACvB,MAAO,CACLO,MAAOP,EAAMO,SAIuB,CACtCD,kBFpC+B,yDAAM,WAAOxB,EAAUgC,GAAjB,SAAA/B,EAAA,sEAC/BD,EAASD,KADsB,OAErBkC,IAAEC,KAAKD,IAAEP,IAAIM,IAAWP,MAAO,WACvCU,SAAQ,SAAC1B,GAAD,OAAQT,EAASQ,EAAUC,OAHN,2CAAN,0DEmClBQ,CAEZM,GCvBYN,eAJS,SAACC,GAAD,MAAY,KAET,GAEZD,EAZI,WACjB,OACE,yBAAKH,UAAU,gBACb,kBAAC,EAAD,U,QCHSsB,cAAgB,CAC7BX,MCNa,WAAyB,IAAxBP,EAAuB,uDAAf,GAAImB,EAAW,uCACrC,OAAQA,EAAOhC,MACb,IAAK,cACH,OAAOgC,EAAO/B,QAChB,QACE,OAAOY,IDEXE,MEPa,WAAyB,IAAxBF,EAAuB,uDAAf,GAAImB,EAAW,uCACrC,OAAQA,EAAOhC,MACb,IAAK,aACH,MAAM,GAAN,mBAAWa,GAAX,CAAkBmB,EAAO/B,UAC3B,QACE,OAAOY,MCIPoB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.c80b997e.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nexport default Axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n});\r\n","import jsonPlaceHolder from '../apis/jsonPlaceHolder';\r\nimport _ from 'lodash';\r\n\r\nexport const fetchPostAndUsers = () => async (dispatch, getState) => {\r\n  await dispatch(fetchPosts());\r\n  const userIds = _.uniq(_.map(getState().posts, 'userId'));\r\n  userIds.forEach((id) => dispatch(fetchUser(id)));\r\n};\r\n\r\nexport const fetchPosts = () => {\r\n  return async (dispatch) => {\r\n    const response = await jsonPlaceHolder.get('/posts');\r\n\r\n    dispatch({\r\n      type: 'FETCH_POSTS',\r\n      payload: response.data,\r\n    });\r\n  };\r\n};\r\n\r\n// Memoize for creating private funtions\r\n/*\r\nexport const fetchUser = (id) => {\r\n  return (dispatch) => {\r\n    _fetchUser(id, dispatch);\r\n  };\r\n};\r\n\r\nconst _fetchUser = _.memoize(async (id, dispatch) => {\r\n  const response = await jsonPlaceHolder.get(`/users/${id}`);\r\n\r\n  dispatch({\r\n    type: 'FETCH_USER',\r\n    payload: response.data,\r\n  });\r\n});\r\n*/\r\n\r\nexport const fetchUser = (id) => {\r\n  return async (dispatch) => {\r\n    const response = await jsonPlaceHolder.get(`/users/${id}`);\r\n\r\n    dispatch({\r\n      type: 'FETCH_USER',\r\n      payload: response.data,\r\n    });\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserHeader extends Component {\r\n  render() {\r\n    const { user } = this.props;\r\n\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return <div className='header'>{user.name}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { user: state.users.find((user) => user.id === ownProps.userId) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserHeader);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostAndUsers } from '../actions';\r\nimport UserHeader from './UserHeader';\r\n\r\nclass PostList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPostAndUsers();\r\n  }\r\n\r\n  renderList() {\r\n    return this.props.posts.map((post) => {\r\n      return (\r\n        <div className='item' key={post.id}>\r\n          <i className='large middle aligned icon user' />\r\n          <div className='content'>\r\n            <div className='description'>\r\n              <h2>{post.title}</h2>\r\n              <p>{post.body}</p>\r\n            </div>\r\n            <UserHeader userId={post.userId} />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className='ui relaxed divided list'>{this.renderList()}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchPostAndUsers,\r\n})(PostList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PostList from './PostList';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div className='ui container'>\r\n      <PostList />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\nimport usersReducer from './usersReducer';\r\n\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n  users: usersReducer,\r\n});\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_POSTS':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_USER':\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}